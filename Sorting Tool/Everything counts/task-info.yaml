type: edu
custom_name: stage4
files:
- name: src/sorting/Main.java
  visible: true
  text: "package sorting;\n\nimport java.util.*;\n\npublic class Main {\n    public\
    \ static void main(final String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\
    \n        String dataType = \"word\";\n        String command = \"info\";\n  \
    \      Sorter sorter = null;\n        ArrayList<String> dataTypeOptions = new\
    \ ArrayList<>(Arrays.asList(\"word\", \"long\", \"line\"));\n        \n      \
    \  for (int i = 0; i < args.length; i++) {\n            if (args[i].equals(\"\
    -sortIntegers\")) {\n                dataType = \"long\";\n                command\
    \ = \"sort\";\n                break;\n            }\n            if (args[i].equals(\"\
    -dataType\")) {\n                dataType = args[i + 1];\n            }\n    \
    \    }\n        \n        switch (dataType) {\n            case \"word\":\n  \
    \              sorter = new SorterWord();\n                break;\n          \
    \  case \"line\":\n                sorter = new SorterLine();\n              \
    \  break;\n            case \"long\":\n                sorter = new SorterLong();\n\
    \                break;\n            default:\n                sorter = new SorterWord();\n\
    \                System.out.println(\"DataType argument was missing???\");\n \
    \       }\n\n        sorter.createList();\n\n        switch (command) {\n    \
    \        case \"info\":\n                sorter.printArrayInfo();\n          \
    \      break;\n            case \"sort\":\n                sorter.printSortedStats();\n\
    \                break;\n            default:\n                sorter.printArrayInfo();\n\
    \                System.out.println(\"Command argument was missing???\");\n  \
    \      }\n\n    }\n\n}\n"
  learner_created: false
- name: src/sorting/Sorter.java
  visible: true
  text: |-
    package sorting;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Scanner;

    import static java.util.Collections.*;

    public interface Sorter {
        Scanner scan = new Scanner(System.in);

        public void createList();

        public void setList(List input);

        public List getSortableList();

        public <E> E getLargest();

        public int getNumberOfRepeats();

        public default int getRepeatPercentage() {
            double percent = (double) getNumberOfRepeats() / (double) getSortableList().size();
            return (int) Math.round(percent * 100);
        }

        public void printArrayInfo();

        public void printSortedStats();

    }

    class SorterWord implements Sorter {

        public static List<String> sortableList = new ArrayList<>(0);

        @Override
        public void createList() {
            while (scan.hasNext()) {
                sortableList.add(scan.next());
            }
            sort(sortableList);
        }

        @Override
        public void setList(List input) {
            sortableList = input;
        }

        @Override
        public List getSortableList() {
            return sortableList;
        }

        @Override
        public String getLargest() {
            String largest = sortableList.get(0);
            for (String str : sortableList) {
                if (!largest.equals(str) && largest.length() < str.length()) {
                    largest = str;
                }
            }
            return largest;
        }

        @Override
        public int getNumberOfRepeats() {
            String largest = getLargest();
            int count = 0;
            for (String str : sortableList) {
                if (largest.equals(str)) {
                    count++;
                }
            }
            return count;
        }

        @Override
        public void printArrayInfo() {
            System.out.printf("Total words: %d", sortableList.size());
            System.out.printf("\nThe longest word: %s (%d time(s), %d%%)",
                    getLargest(), getNumberOfRepeats(), getRepeatPercentage());
        }

        @Override
        public void printSortedStats() {

        }
    }

    class SorterLine implements Sorter {

        public static List<String> sortableList = new ArrayList<>(0);

        @Override
        public void createList() {
            while (scan.hasNextLine()) {
                sortableList.add(scan.nextLine());
            }
            sort(sortableList);
        }

        @Override
        public void setList(List input) {
            sortableList = input;
        }

        @Override
        public List getSortableList() {
            return sortableList;
        }

        @Override
        public String getLargest() {
            String largest = sortableList.get(0);
            for (String str : sortableList) {
                if (!largest.equals(str) && largest.length() < str.length()) {
                    largest = str;
                }
            }
            return largest;
        }

        @Override
        public int getNumberOfRepeats() {
            String largest = getLargest();
            int count = 0;
            for (String str : sortableList) {
                if (largest.equals(str)) {
                    count++;
                }
            }
            return count;
        }

        @Override
        public void printArrayInfo() {
            System.out.printf("Total lines: %d", sortableList.size());
            System.out.print("\nThe longest line:\n");
            System.out.println(getLargest());
            System.out.printf("(%d time(s), %d%%)", getNumberOfRepeats(), getRepeatPercentage());
        }

        @Override
        public void printSortedStats() {

        }
    }

    class SorterLong implements Sorter {

        public static List<Long> sortableList = new ArrayList<>(0);

        @Override
        public void createList() {
            while (scan.hasNextLong()) {
                sortableList.add(scan.nextLong());
            }
            sort(sortableList);
        }

        @Override
        public void setList(List input) {
            sortableList = input;
        }

        @Override
        public List getSortableList() {
            return sortableList;
        }

        @Override
        public Long getLargest() {
            return sortableList.get(sortableList.size() - 1);
        }

        @Override
        public int getNumberOfRepeats() {
            Long largest = getLargest();
            int count = 0;
            for (Long num : sortableList) {
                if (largest == num) {
                    count++;
                }
            }
            return count;
        }

        @Override
        public void printArrayInfo() {
            System.out.printf("Total numbers: %d", sortableList.size());
            System.out.printf("\nThe greatest number: %d (%d time(s), %d%%)",
                    getLargest(), getNumberOfRepeats(), getRepeatPercentage());
        }

        @Override
        public void printSortedStats() {
            StringBuilder sortedData = new StringBuilder("Sorted data:");

            for (int i = 0; i < sortableList.size(); i++) {
                sortedData.append(" ").append(sortableList.get(i));
            }

            System.out.printf("Total numbers: %d.\n", sortableList.size());
            System.out.println(sortedData.toString());

        }
    }
  learner_created: false
- name: test/common/SortingToolStage4Test.kt
  visible: true
  text: |+
    package common

    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase
    import org.hyperskill.hstest.testing.Settings
    import java.util.*

    class SortingToolStage4Test : StageTest<SortingToolClue>() {

        init {
            Settings.allowOutOfInput = true
        }

        override fun generate(): List<TestCase<SortingToolClue>> {
            return stage4Tests()
        }

        override fun check(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "byCount" in clue.args -> checkByCount(reply, clue)
                else -> checkNatural(reply, clue)
            }
        }

        private fun checkByCount(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "long" in clue.args -> checkByCount(parseLongTokens(clue.consoleInput), { it.toInt() }, clue, reply)
                "word" in clue.args -> checkByCount(parseWordTokens(clue.consoleInput), { it }, clue, reply)
                "line" in clue.args -> checkByCount(parseLineTokens(clue.consoleInput), { it }, clue, reply)

                else -> throw IllegalArgumentException("Bad test: no data type found")
            }
        }

        private fun checkNatural(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "long" in clue.args -> checkNatural(parseLongTokens(clue.consoleInput), ::parseLongTokens, clue, reply)
                "word" in clue.args -> checkNatural(parseWordTokens(clue.consoleInput), ::parseWordTokens, clue, reply)
                "line" in clue.args -> checkNatural(parseLineTokens(clue.consoleInput), ::parseLineTokens, clue, reply)

                else -> throw IllegalArgumentException("Bad test: no data type found")
            }
        }
    }

    fun stage4Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-dataType", "long", "-sortingType", "natural"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-dataType", "long"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "long"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "word"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "line"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "line"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "word"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "long"
                )
        )
    }



    fun revealRawTest(clue: SortingToolClue, reply: String): String {
        return with(clue) { "Args:\n${args.joinToString(" ")}\nInput:\n$consoleInput\nYour output:\n$reply\n\n" }
    }

    class SortingToolClue(val consoleInput: String, val revealTest: Boolean, val args: List<String>)

    fun createTest(
            consoleInput: String,
            revealTest: Boolean,
            vararg args: String = arrayOf("-dataType", "long")
    ): TestCase<SortingToolClue> {
        return TestCase<SortingToolClue>()
                .setAttach(SortingToolClue(consoleInput, revealTest, args.toList()))
                .setInput(consoleInput)
                .addArguments(*args)
    }

    fun parseLongTokens(input: String): List<Int> {
        val scanner = Scanner(input)

        val longTokens = mutableListOf<Int>()

        while (scanner.hasNextInt()) {
            longTokens.add(scanner.nextInt())
        }

        return longTokens
    }

    fun parseWordTokens(input: String): List<String> {
        val scanner = Scanner(input)

        val wordTokens = mutableListOf<String>()

        while (scanner.hasNext()) {
            wordTokens.add(scanner.next())
        }

        return wordTokens
    }

    fun parseLineTokens(input: String): List<String> {
        return input.lines()
    }

    fun <TokenType : Comparable<TokenType>> checkNatural(
            actualTokens: List<TokenType>,
            sortedTokensParser: (String) -> List<TokenType>,
            clue: SortingToolClue,
            reply_: String
    ): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        if (lines.size != 2) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't parse your output: expected 2 lines.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't parse your output: expected 2 lines.")
            }
        }

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't find number in the first line of your output.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalTokens = totalMatchResult.groupValues[1].toInt()

        val actualTotal = actualTokens.size

        if (actualTotal != totalTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total tokens are incorrect.")
            }
        }

        val sortedActualTokens = actualTokens.sorted()

        val sortedTokens = sortedTokensParser(lines[1].substringAfter(":").dropWhile { it in setOf('\n', '\r') })

        val total = sortedTokens.size

        if (actualTotal != total) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total sorted tokens ($total) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total sorted tokens are incorrect.")
            }
        }

        if (sortedActualTokens != sortedTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Sorted tokens are incorrect.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Sorted tokens are incorrect.")
            }
        }

        return CheckResult(true)
    }

    fun <TokenType : Comparable<TokenType>> checkByCount(
            actualTokens: List<TokenType>,
            tokenParser: (String) -> TokenType,
            clue: SortingToolClue,
            reply_: String
    ): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't find number in the first line of your output.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalTokens = totalMatchResult.groupValues[1].toInt()

        val actualTotal = actualTokens.size

        if (actualTotal != totalTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total tokens are incorrect.")
            }
        }

        val tokenToCount = mutableMapOf<TokenType, Int>()

        for (token in actualTokens) {
            tokenToCount[token] = (tokenToCount[token] ?: 0) + 1
        }

        val actualSortedByCount = tokenToCount.toList().sortedWith(compareBy({ it.second }, { it.first }))
        val linesWithTokens = lines.drop(1)

        if (actualSortedByCount.size != linesWithTokens.size) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Lines with tokens (${linesWithTokens.size}) are incorrect. Expected: ${actualSortedByCount.size}.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Lines with tokens are incorrect.")
            }
        }

        for ((lineId, line) in linesWithTokens.withIndex()) {
            val token = tokenParser(line.substringBefore(':'))
            val info = line.substringAfter(':')

            val (actualToken, actualTimes) = actualSortedByCount[lineId]

            if (token != actualToken) {
                return if (clue.revealTest) {
                    CheckResult(
                            false,
                            "Token ($token) is incorrect. Expected: $actualToken.\n" +
                                    revealRawTest(clue, reply)
                    )
                } else {
                    CheckResult(false, "Token is incorrect.")
                }
            }

            // TODO: check info (times and percentage)
        }

        return CheckResult(true)
    }


  learner_created: false
- name: test/sorting/MainTest.java
  visible: true
  text: |
    /*
    package sorting;

    import junit.framework.TestCase;
    import org.junit.Assert;
    import org.junit.Test;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;

    public class MainTest {

        List<Long> input = new ArrayList<Long>(Arrays.asList(15L, -3L, 0L, 42L, 42L, 6L, -100L, 42L, 15L));
        Long highest = 42L;


        @Test
        public void shouldCountNumbers() {
            Assert.assertEquals(9, Main.countTotalNumbers(input));
        }

        @Test
        public void shouldReturnHighest() {
            Assert.assertEquals(highest, Main.findHighestNumber(input));
        }

        @Test
        public void shouldCountHighests() {
            Assert.assertEquals(3, Main.countHighestNumbers(input, highest) );
        }



    }*/
  learner_created: false
feedback_link: https://hyperskill.org/projects/45/stages/242/implement#comment
status: Failed
feedback:
  message: |-
    Wrong answer in test #3

    Token (333) is incorrect. Expected: 4.
    Args:
    -sortingType byCount -dataType long
    Input:
    1 -2   333 4
    42
    1                 1
    Your output:
    Total numbers: 7.
    -2: 1 time(s), 14%
    333: 1 time(s), 14%
    4: 1 time(s), 14%
    42: 1 time(s), 14%
    1: 3 time(s), 43%

    Please find below the output of your program during this failed test.
    Note that the &#39;&gt;&#39; character indicates the beginning of the input line.

    ---

    Arguments: -sortingType byCount -dataType long

    &gt; 1 -2   333 4
    &gt; 42
    &gt; 1                 1
    Total numbers: 7.
    -2: 1 time(s), 14%
    333: 1 time(s), 14%
    4: 1 time(s), 14%
    42: 1 time(s), 14%
    1: 3 time(s), 43%
  time: Sun, 12 Dec 2021 17:48:37 UTC
record: 3
